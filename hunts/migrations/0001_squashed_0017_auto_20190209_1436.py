# Generated by Django 2.1.5 on 2019-02-10 14:24

import datetime
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import django.utils.timezone
import enumfields.fields
import hunts.models
import sortedm2m.fields
import uuid


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# hunts.migrations.0017_auto_20190209_1436

class Migration(migrations.Migration):

    replaces = [('hunts', '0001_initial'), ('hunts', '0002_auto_20180514_2037'), ('hunts', '0002_auto_20180513_1909'), ('hunts', '0003_merge_20180603_1925'), ('hunts', '0004_auto_20180716_2132'), ('hunts', '0004_auto_20180702_0750'), ('hunts', '0005_merge_20180731_0156'), ('hunts', '0006_auto_20180807_0926'), ('hunts', '0007_auto_20180812_0934'), ('hunts', '0008_auto_20180815_2122'), ('hunts', '0009_episode_winning'), ('hunts', '0010_auto_20181226_1919'), ('hunts', '0010_auto_20181216_1734'), ('hunts', '0011_merge_20181228_1219'), ('hunts', '0012_auto_20190108_0840'), ('hunts', '0013_auto_20190108_0937'), ('hunts', '0011_auto_20181229_2011'), ('hunts', '0012_merge_20190101_1431'), ('hunts', '0014_merge_20190111_0921'), ('hunts', '0012_auto_20190110_2323'), ('hunts', '0013_merge_20190124_2043'), ('hunts', '0015_merge_20190126_1649'), ('hunts', '0016_auto_20190207_1537'), ('hunts', '0017_auto_20190209_1436')]

    initial = True

    dependencies = [
        ('events', '0001_initial'),
        ('teams', '0002_auto_20180513_1909'),
        ('teams', '0001_initial'),
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('posted', models.DateTimeField(auto_now_add=True)),
                ('message', models.TextField(blank=True)),
                ('type', enumfields.fields.EnumField(default='I', enum=hunts.models.AnnouncementType, max_length=1)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='announcements', to='events.Event')),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('runtime', models.CharField(choices=[('I', 'IFrame Runtime'), ('L', 'Lua Runtime'), ('R', 'Regex Runtime'), ('S', 'Static Runtime')], default='S', max_length=1)),
                ('answer', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Episode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('flavour', models.TextField(blank=True)),
                ('start_date', models.DateTimeField()),
                ('parallel', models.BooleanField(default=False, help_text='Allow players to answer riddles in this episode in any order they like')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.Event')),
                ('headstart_from', models.ManyToManyField(blank=True, help_text='Episodes which should grant a headstart for this episode', to='hunts.Episode')),
                ('prequels', models.ManyToManyField(blank=True, help_text='Set of episodes which must be completed before starting this one', related_name='sequels', to='hunts.Episode')),
            ],
        ),
        migrations.CreateModel(
            name='Guess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guess', models.TextField()),
                ('given', models.DateTimeField(auto_now_add=True)),
                ('correct_current', models.BooleanField(default=False)),
                ('by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.UserProfile')),
                ('by_team', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='teams.Team')),
                ('correct_for', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hunts.Answer')),
            ],
            options={
                'verbose_name_plural': 'Guesses',
            },
        ),
        migrations.CreateModel(
            name='Hint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='Text displayed when this clue is unlocked')),
                ('time', models.DurationField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Puzzle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique=True)),
                ('flavour', models.TextField(blank=True, help_text='Separate flavour text for the puzzle. Should not be required for solving the puzzle', verbose_name='Flavour text')),
                ('runtime', models.CharField(choices=[('I', 'IFrame Runtime'), ('L', 'Lua Runtime'), ('R', 'Regex Runtime'), ('S', 'Static Runtime')], default='S', help_text='Runtime for generating the question content', max_length=1)),
                ('content', models.TextField()),
                ('cb_runtime', models.CharField(choices=[('I', 'IFrame Runtime'), ('L', 'Lua Runtime'), ('R', 'Regex Runtime'), ('S', 'Static Runtime')], default='S', help_text='Runtime for responding to an AJAX callback for this question, should return JSON', max_length=1, verbose_name='Callback runtime')),
                ('cb_content', models.TextField(blank=True, default='', verbose_name='Callback content')),
                ('start_date', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('headstart_granted', models.DurationField(default=datetime.timedelta(0), help_text='How much headstart this puzzle gives to later episodes which gain headstart from this episode')),
            ],
        ),
        migrations.CreateModel(
            name='PuzzleFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(help_text='Include the URL of the file in puzzle content using $slug or ${slug}.', max_length=50)),
                ('file', models.FileField(upload_to=hunts.models.puzzle_file_path)),
                ('puzzle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hunts.Puzzle')),
                ('url_path', models.CharField(help_text='The path you want to appear in the URL. Can include "directories" using /', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='TeamData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('team', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='teams.Team')),
            ],
            options={
                'verbose_name_plural': 'Team data',
            },
        ),
        migrations.CreateModel(
            name='TeamPuzzleData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('puzzle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hunts.Puzzle')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='teams.Team')),
            ],
            options={
                'verbose_name_plural': 'Team puzzle data',
            },
        ),
        migrations.CreateModel(
            name='Unlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='Text displayed when this clue is unlocked')),
                ('puzzle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hunts.Puzzle')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UnlockAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('runtime', models.CharField(choices=[('S', 'Static Runtime'), ('s', 'Case Sensitive Static Runtime'), ('R', 'Regex Runtime'), ('r', 'Case Sensitive Regex Runtime'), ('I', 'IFrame Runtime'), ('L', 'Lua Runtime')], default='S', max_length=1)),
                ('guess', models.TextField()),
                ('unlock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hunts.Unlock')),
            ],
        ),
        migrations.CreateModel(
            name='UserData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.Event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.UserProfile')),
            ],
            options={
                'verbose_name_plural': 'User data',
            },
        ),
        migrations.CreateModel(
            name='UserPuzzleData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('puzzle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hunts.Puzzle')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.UserProfile')),
            ],
            options={
                'verbose_name_plural': 'User puzzle data',
            },
        ),
        migrations.AddField(
            model_name='hint',
            name='puzzle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hunts.Puzzle'),
        ),
        migrations.AddField(
            model_name='guess',
            name='for_puzzle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hunts.Puzzle'),
        ),
        migrations.AddField(
            model_name='episode',
            name='puzzles',
            field=sortedm2m.fields.SortedManyToManyField(blank=True, help_text=None, to='hunts.Puzzle'),
        ),
        migrations.AddField(
            model_name='answer',
            name='for_puzzle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hunts.Puzzle'),
        ),
        migrations.AddField(
            model_name='announcement',
            name='puzzle',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='announcements', to='hunts.Puzzle'),
        ),
        migrations.AlterUniqueTogether(
            name='userpuzzledata',
            unique_together={('puzzle', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='userdata',
            unique_together={('event', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='teampuzzledata',
            unique_together={('puzzle', 'team')},
        ),
        migrations.AlterUniqueTogether(
            name='puzzlefile',
            unique_together={('puzzle', 'slug'), ('puzzle', 'url_path')},
        ),
        migrations.AlterUniqueTogether(
            name='episode',
            unique_together={('event', 'start_date')},
        ),
        migrations.AlterField(
            model_name='guess',
            name='by_team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='teams.Team'),
        ),
        migrations.AlterField(
            model_name='announcement',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='announcements', to='events.Event'),
        ),
        migrations.AlterField(
            model_name='episode',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='events.Event'),
        ),
        migrations.AlterField(
            model_name='userdata',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='events.Event'),
        ),
        migrations.AlterField(
            model_name='answer',
            name='runtime',
            field=models.CharField(choices=[('S', 'Static Runtime'), ('s', 'Case Sensitive Static Runtime'), ('R', 'Regex Runtime'), ('r', 'Case Sensitive Regex Runtime'), ('I', 'IFrame Runtime'), ('L', 'Lua Runtime')], default='S', max_length=1),
        ),
        migrations.AlterField(
            model_name='puzzle',
            name='cb_runtime',
            field=models.CharField(choices=[('S', 'Static Runtime'), ('s', 'Case Sensitive Static Runtime'), ('R', 'Regex Runtime'), ('r', 'Case Sensitive Regex Runtime'), ('I', 'IFrame Runtime'), ('L', 'Lua Runtime')], default='S', help_text='Runtime for responding to an AJAX callback for this question, should return JSON', max_length=1, verbose_name='Callback runtime'),
        ),
        migrations.AlterField(
            model_name='puzzle',
            name='runtime',
            field=models.CharField(choices=[('S', 'Static Runtime'), ('s', 'Case Sensitive Static Runtime'), ('R', 'Regex Runtime'), ('r', 'Case Sensitive Regex Runtime'), ('I', 'IFrame Runtime'), ('L', 'Lua Runtime')], default='S', help_text='Runtime for generating the question content', max_length=1),
        ),
        migrations.CreateModel(
            name='SolutionFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(help_text='Include the URL of the file in solution content using $slug or ${slug}.', max_length=50)),
                ('file', models.FileField(upload_to=hunts.models.solution_file_path)),
            ],
        ),
        migrations.AddField(
            model_name='puzzle',
            name='soln_content',
            field=models.TextField(blank=True, default='', verbose_name='Solution content'),
        ),
        migrations.AddField(
            model_name='puzzle',
            name='soln_runtime',
            field=models.CharField(choices=[('S', 'Static Runtime'), ('s', 'Case Sensitive Static Runtime'), ('R', 'Regex Runtime'), ('r', 'Case Sensitive Regex Runtime'), ('I', 'IFrame Runtime'), ('L', 'Lua Runtime')], default='S', help_text='Runtime for generating the question solution', max_length=1, verbose_name='Solution runtime'),
        ),
        migrations.AddField(
            model_name='solutionfile',
            name='puzzle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hunts.Puzzle'),
        ),
        migrations.AddField(
            model_name='solutionfile',
            name='url_path',
            field=models.CharField(help_text='The path you want to appear in the URL. Can include "directories" using /', max_length=50),
        ),
        migrations.AlterUniqueTogether(
            name='solutionfile',
            unique_together={('puzzle', 'slug'), ('puzzle', 'url_path')},
        ),
        migrations.AlterField(
            model_name='puzzlefile',
            name='slug',
            field=models.CharField(blank=True, help_text='Include the URL of the file in puzzle content using $slug or ${slug}.', max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='solutionfile',
            name='slug',
            field=models.CharField(blank=True, help_text='Include the URL of the file in solution content using $slug or ${slug}.', max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='episode',
            name='winning',
            field=models.BooleanField(default=False, help_text='Whether this episode must be won in order to win the event'),
        ),
        migrations.AlterField(
            model_name='unlockanswer',
            name='unlock',
            field=models.IntegerField(),
        ),
        migrations.RenameField(
            model_name='hint',
            old_name='id',
            new_name='old_id',
        ),
        migrations.AlterField(
            model_name='hint',
            name='old_id',
            field=models.AutoField(primary_key=True, serialize=False),
        ),
        migrations.RenameField(
            model_name='unlock',
            old_name='id',
            new_name='old_id',
        ),
        migrations.AlterField(
            model_name='unlock',
            name='old_id',
            field=models.AutoField(primary_key=True, serialize=False),
        ),
        migrations.AddField(
            model_name='hint',
            name='id',
            field=models.UUIDField(editable=False, null=True),
        ),
        migrations.AddField(
            model_name='unlock',
            name='id',
            field=models.UUIDField(editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='hint',
            name='old_id',
            field=models.IntegerField(unique=True),
        ),
        migrations.AlterField(
            model_name='hint',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='unlock',
            name='old_id',
            field=models.IntegerField(unique=True),
        ),
        migrations.AlterField(
            model_name='unlock',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
        ),
        migrations.AddField(
            model_name='UnlockAnswer',
            name='temp_unlock',
            field=models.UUIDField(null=True),
        ),
        migrations.RemoveField(
            model_name='UnlockAnswer',
            name='unlock',
        ),
        migrations.RenameField(
            model_name='UnlockAnswer',
            old_name='temp_unlock',
            new_name='unlock',
        ),
        migrations.AlterField(
            model_name='UnlockAnswer',
            name='unlock',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Unlock'),
        ),
        migrations.RemoveField(
            model_name='hint',
            name='old_id',
        ),
        migrations.RemoveField(
            model_name='unlock',
            name='old_id',
        ),
        migrations.AlterField(
            model_name='puzzle',
            name='start_date',
            field=models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='Date/Time for puzzle to start. Only applies if the puzzle is part of a parallel episode.'),
        ),
        migrations.RenameField(
            model_name='guess',
            old_name='id',
            new_name='old_id',
        ),
        migrations.AlterField(
            model_name='guess',
            name='old_id',
            field=models.AutoField(editable=False, primary_key=True, serialize=False),
        ),
        migrations.AddField(
            model_name='guess',
            name='id',
            field=models.UUIDField(editable=False, null=True),
        ),
        migrations.RemoveField(
            model_name='guess',
            name='old_id',
        ),
        migrations.AlterField(
            model_name='guess',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='unlockanswer',
            name='unlock',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='hunts.Unlock'),
        ),
        migrations.AlterUniqueTogether(
            name='hint',
            unique_together={('puzzle', 'text')},
        ),
        migrations.AlterUniqueTogether(
            name='unlock',
            unique_together={('puzzle', 'text')},
        ),
        migrations.AlterField(
            model_name='answer',
            name='runtime',
            field=models.CharField(choices=[('S', 'Static'), ('s', 'Case Sensitive Static'), ('R', 'Regex'), ('r', 'Case Sensitive Regex'), ('I', 'IFrame'), ('L', 'Lua')], default='S', help_text='Processor to use to check whether guess is correct', max_length=1, verbose_name='Validator'),
        ),
        migrations.AlterField(
            model_name='hint',
            name='time',
            field=models.DurationField(help_text='Time after anyone on the team first loads the puzzle to display this hint', verbose_name='Delay'),
        ),
        migrations.AlterField(
            model_name='puzzle',
            name='cb_content',
            field=models.TextField(blank=True, default='', help_text='Script for generating AJAX responses for callbacks made by puzzle', verbose_name='AJAX callback script'),
        ),
        migrations.AlterField(
            model_name='puzzle',
            name='cb_runtime',
            field=models.CharField(choices=[('S', 'Static'), ('s', 'Case Sensitive Static'), ('R', 'Regex'), ('r', 'Case Sensitive Regex'), ('I', 'IFrame'), ('L', 'Lua')], default='S', help_text='Processor used to execute the callback script in response to AJAX requests', max_length=1, verbose_name='AJAX callback processor'),
        ),
        migrations.AlterField(
            model_name='puzzle',
            name='content',
            field=models.TextField(help_text='Main puzzle page content, generated using the puzzle renderer', verbose_name='Puzzle page content'),
        ),
        migrations.AlterField(
            model_name='puzzle',
            name='runtime',
            field=models.CharField(choices=[('S', 'Static'), ('s', 'Case Sensitive Static'), ('R', 'Regex'), ('r', 'Case Sensitive Regex'), ('I', 'IFrame'), ('L', 'Lua')], default='S', help_text='Renderer for generating the main puzzle page', max_length=1, verbose_name='Puzzle page renderer'),
        ),
        migrations.AlterField(
            model_name='puzzle',
            name='soln_content',
            field=models.TextField(blank=True, default='', help_text='Content to be displayed to all users on the puzzle page after the event has completed', verbose_name='Solution content'),
        ),
        migrations.AlterField(
            model_name='puzzle',
            name='soln_runtime',
            field=models.CharField(choices=[('S', 'Static'), ('s', 'Case Sensitive Static'), ('R', 'Regex'), ('r', 'Case Sensitive Regex'), ('I', 'IFrame'), ('L', 'Lua')], default='S', help_text='Renderer for generating the question solution', max_length=1, verbose_name='Solution renderer'),
        ),
        migrations.AlterField(
            model_name='puzzlefile',
            name='file',
            field=models.FileField(help_text='The extension of the uploaded file will determine the Content-Type of the file when served', upload_to=hunts.models.puzzle_file_path),
        ),
        migrations.AlterField(
            model_name='puzzlefile',
            name='slug',
            field=models.CharField(blank=True, help_text='Include the URL of the file in puzzle content using $slug or ${slug}.', max_length=50, null=True, verbose_name='Template Slug'),
        ),
        migrations.AlterField(
            model_name='puzzlefile',
            name='url_path',
            field=models.CharField(help_text='The file path you want to appear in the URL. Can include "directories" using /', max_length=50, verbose_name='URL Filename'),
        ),
        migrations.AlterField(
            model_name='solutionfile',
            name='file',
            field=models.FileField(help_text='The extension of the uploaded file will determine the Content-Type of the file when served', upload_to=hunts.models.solution_file_path),
        ),
        migrations.AlterField(
            model_name='solutionfile',
            name='slug',
            field=models.CharField(blank=True, help_text='Include the URL of the file in puzzle content using $slug or ${slug}.', max_length=50, null=True, verbose_name='Template Slug'),
        ),
        migrations.AlterField(
            model_name='solutionfile',
            name='url_path',
            field=models.CharField(help_text='The file path you want to appear in the URL. Can include "directories" using /', max_length=50, verbose_name='URL Filename'),
        ),
        migrations.AlterField(
            model_name='unlockanswer',
            name='runtime',
            field=models.CharField(choices=[('S', 'Static'), ('s', 'Case Sensitive Static'), ('R', 'Regex'), ('r', 'Case Sensitive Regex'), ('I', 'IFrame'), ('L', 'Lua')], default='S', help_text='Processor to use to check whether guess unlocks this unlock', max_length=1, verbose_name='Validator'),
        ),
        migrations.CreateModel(
            name='Headstart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('headstart_adjustment', models.DurationField(default=datetime.timedelta(0), help_text='Time difference to apply to the headstart for the team on the specified episode. This will apply in addition to any headstart they earn through other mechanisms.')),
                ('episode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hunts.Episode')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='teams.Team')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='headstart',
            unique_together={('episode', 'team')},
        ),
        migrations.AddField(
            model_name='puzzle',
            name='episode',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hunts.Episode'),
        ),
        migrations.AddField(
            model_name='puzzle',
            name='order',
            field=models.PositiveIntegerField(db_index=True, default=1, editable=False, verbose_name='order'),
            preserve_default=False,
        ),
        migrations.RemoveField(
            model_name='episode',
            name='puzzles',
        ),
        migrations.AlterModelOptions(
            name='episode',
            options={'ordering': ('start_date',)},
        ),
        migrations.AlterModelOptions(
            name='puzzle',
            options={'ordering': ('episode', 'order')},
        ),
    ]
